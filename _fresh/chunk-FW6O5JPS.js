var a={id:"callee",name:"callee",alias:"Player-1",role:"callee"},c={id:"caller",name:"caller",alias:"Player-2",role:"caller"};function h(e){c=e,console.info("setCaller: ",c)}function x(e,n){a={id:e,name:n,alias:"Player-1",role:"callee"},c={id:"caller",name:"caller",alias:"Player-2",role:"caller"}}var v=(e,n)=>{let t=JSON.stringify({from:e,event:"RegisterPeer",data:a});fetch(y,{method:"POST",body:t})};var s=!0,o,r,C=!1,R=()=>{l("RtcOffer",async e=>{if(h(e.from),o){s&&console.error("existing peerconnection");return}D(!1),await o.setRemoteDescription(e.data);let n=await o.createAnswer();f({event:"RtcAnswer",data:{type:"answer",sdp:n.sdp}}),await o.setLocalDescription(n)}),l("RtcAnswer",async e=>{if(!o){s&&console.error("no peerconnection");return}await o.setRemoteDescription(e)}),l("candidate",async e=>{if(!o){s&&console.error("no peerconnection");return}console.log("handling candidate!"),e.candidate?await o.addIceCandidate(e):await o.addIceCandidate(null)}),l("close",()=>{o&&(o.close(),o=null)}),l("invitation",e=>{if(o){s&&console.log("Already connected, ignoring this 'invitation'!");return}h(e),s&&console.log(`A peer named ${e.name} has sent me an 'invitation'!  I'll make a  WebRTC-connection!`),U()}),d("UpdateUI",`\u231B  ${a.name} is waiting for a connection
 from: ${location.origin}`)},E=()=>{console.info("inviting from start - callee:",a),f({event:"invitation",data:a})};function L(e){r=null,o=null,E(),d("ShowPopup",e)}function D(e){s&&console.log("Starting WebRTC as",e?"Offeror":"Offeree"),o=new RTCPeerConnection({iceServers:[{urls:["stun:stun1.l.google.com:19302","stun:stun2.l.google.com:19302"]}]}),o.onicecandidate=n=>{let t={candidate:null,sdpMid:"",sdpMLineIndex:0};n.candidate&&(t.candidate=n.candidate.candidate,t.sdpMid=n.candidate.sdpMid,t.sdpMLineIndex=n.candidate.sdpMLineIndex),f({event:"candidate",data:t})},e?(s&&console.log("Offeror -> creating dataChannel!"),r=o.createDataChannel("chat"),P()):o.ondatachannel=n=>{s&&console.log("peerConnection.ondatachannel -> creating dataChannel!"),r=n.channel,P()}}function P(){r.onopen=O,r.onclose=O,r.onmessage=e=>{let n=JSON.parse(e.data),{event:t,data:i}=n;s&&console.info("<<<<  DataChannel got  <<<<  ",t),d(t,i)}}function O(){r.readyState===w.open?C===!1&&(C=!0,d("UpdateUI",`${a.name} is now connected to ${c.name}`),console.log(`${a.name} is now connected to ${c.name}`)):r.readyState===w.closed&&C===!0&&(C=!1,d("RemovePeer",c.id),L({title:"Disconnect",msg:`${c.name} has disconnected!`}))}async function U(){D(!0);let e=await o.createOffer();f({event:"RtcOffer",data:{from:a,data:{type:"offer",sdp:e.sdp}}}),await o.setLocalDescription(e)}var T=e=>{if(r&&r.readyState==="open"){let n=JSON.stringify(e);s&&console.info(">>>>  DataChannel  >>>> :",n),r.send(n)}else s&&console.log("No place to send the message:",e.event)},w={closed:"closed",closing:"closing",connecting:"connecting",open:"open"};var y="/api/post",$="/api/sse?id=",g=!0,S=new Map,p,M=(e,n)=>{x(n,e),self.addEventListener("beforeunload",t=>{if(t.preventDefault(),p.readyState===N.OPEN){let i=JSON.stringify({from:a.id,event:"close",data:a.id+" window was closed!",id:0});fetch(y,{method:"POST",body:i})}}),p=new EventSource($+n),p.onopen=()=>{g&&console.log("Sse.onOpen! >>>  rtcConnection.start()"),R()},p.onerror=t=>{g&&console.error("sse.error!",t)},p.onmessage=t=>{g&&console.log("<<<<  signaler got  <<<<  ",t.data);let i=JSON.parse(t.data),m=i.event;g&&console.info("               event: ",m),d(m,i.data)},p.addEventListener("SetID",t=>{let i=JSON.parse(t.data),{data:m}=i;v(m.id,a.name),d("SetID",{id:m.id,name:a.name}),E()})};var d=(e,n)=>{if(S.has(e)){let t=S.get(e);if(t)for(let i of t)i(n??{})}},l=(e,n)=>{S.has(e)||S.set(e,[]),S.get(e).push(n)},f=e=>{if(p.readyState===N.OPEN){let n=JSON.stringify({from:a.id,event:e.event,data:e.data});g&&console.log(">>>>  sig-server  >>>> :",n),fetch(y,{method:"POST",body:n})}else g&&console.error("No place to send the message:",e.event)},N={CONNECTING:0,OPEN:1,CLOSED:2};var u=new Map,b=(e,n)=>{u.has(e)?u.get(e).push(n):u.set(e,[n])},k=(e,n)=>{let t=u.get(e);if(t)for(let i of t)n!=null&&i(n)};export{T as a,M as b,l as c,f as d,b as e,k as f};
